# -*- coding: utf-8 -*-
"""Module 1_Tatiana_Troyan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LlI_R2Q67HW9JpTZODGXKt05d0CDMpDj
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Модуль 1/telecom_churn.csv')
df.head(5)

"""настройка опций вывода таблички - 100x100 (по умолчанию 20x60)

"""

pd.set_option('display.max_columns', 100)
pd.set_option('display.max_rows', 100)

"""размер данных (3333 строки, 20 столбцов)"""

print(df.shape)

"""вывод названий столбцов"""

print(df.columns)

"""общая информация по датафрейму и всем признакам"""

print(df.info())

"""изменение типа колонки методом astype"""

df['Churn'] = df['Churn'].astype('int64')
df.head(5)

"""основные статистические характеристики данных по каждому числовому признаку"""

df.describe()

"""статистика по нечисловым признакам"""

df.describe(include=['object', 'bool'])

"""для категориальных и булевых можно использовать метод value_counts"""

df['Churn'].value_counts()

"""распределение пользователей по переменной Area code (значение параметра normalize=True, чтобы посмотреть не абсолютные частоты, а относительные)"""

df['Area code'].value_counts(normalize=True)

"""сортировка по Total day charge (ascending=False для сортировки по убыванию)"""

df.sort_values(by='Total day charge', ascending=False).head()

"""сортировка по группе столбцов"""

df.sort_values(by=['Churn', 'Total day charge'], ascending=[True, False]).head(5)

"""доля людей нелояльных пользователей (14,5%)"""

df['Churn'].mean()

"""средние значения
числовых признаков среди нелояльных пользователей
"""

df[df['Churn'] == 1].mean()

"""средняя длительность разговоров по телефону нелояльных пользователей"""

df[df['Churn'] == 1]['Total day minutes'].mean()

"""максимальная длина международных звонков среди лояльных пользователей (Churn == 0), не пользующихся услугой международного роуминга ('International plan' == 'No')"""

df[(df['Churn'] == 0) & (df['International plan'] == 'No')]['Total intl minutes'].max()

"""индексация датафрейма по названию (передай нам значения для id строк от 0 до 5 и для столбцов от State до Area code)"""

df.loc[0:5, 'State':'Area code']

"""индексация датафрейма по номеру (передай нам значения первых пяти строк в первых трёх столбцах)"""

df.iloc[0:5, 0:3]

"""вывод первой строки"""

df[:1]

"""вывод последней строки"""

df[-1:]

"""применение функции к каждому столбцу (вывод максимального значения)"""

df.apply(np.max)

"""замена значений в колонке (функция map)"""

d = {'No' : 'False', 'Yes' : 'True'}
df['International plan'] = df['International plan'].map(d)
df.head()

"""замена значений в колонке (функция replace)"""

df = df.replace({'Voice main plan' : d})
df.head(5)

"""группирование данных в зависимости от значения признака Churn и вывод статистик по трём столбцам в каждой группе"""

columns_to_show = ['Total day minutes', 'Total eve minutes', 'Total night minutes']
df.groupby(['Churn'])[columns_to_show].describe(percentiles=[])

"""группирование с помощью передачи списка функций в agg (нет count и 50% в отличие от describe)"""

columns_to_show = ['Total day minutes', 'Total eve minutes', 'Total night minutes']
df.groupby(['Churn'])[columns_to_show].agg([np.mean, np.std, np.min, np.max])

"""сводная таблица сопряженности, метод crosstab"""

pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=False)

pd.crosstab(df['Churn'], df['Voice mail plan'], normalize=True)

"""сводная таблица по среднему числу дневных, вечерних и ночных звонков для разных Area code"""

df.pivot_table(['Total day calls', 'Total eve calls', 'Total night calls'], ['Area code'], aggfunc='mean').head(10)

"""вставка нового столбца Total calls (общее количество звонков для всех пользователей)"""

total_calls = df['Total day calls'] + df['Total eve calls'] + df['Total night calls'] + df['Total intl calls']
df.insert(loc=len(df.columns), column='Total calls', value=total_calls)
df.head()

"""вставка нового столбца Total charge"""

df['Total charge'] = df['Total day charge'] + df['Total eve charge'] + df['Total night charge'] + df['Total intl charge']

df.head()



"""удаление столбцов"""

df = df.drop(['Total charge', 'Total calls'], axis=1)
df.drop([1, 2]).head()

"""Сводные таблицы

Связь оттока с признаком International plan
"""

pd.crosstab(df['Churn'], df['International plan'], margins=True)

import seaborn as sns

sns.catplot (data=df, x='International plan', kind='count', hue='Churn')

"""Связь между оттоком и числом обращений в сервисный центр"""

pd.crosstab(df['Churn'], df['Customer service calls'], margins=True)

sns.catplot(data=df, x='Customer service calls', kind='count', hue='Churn')

"""добавление бинарного признака - результат сравнения Customer service calls > 3, его связь с оттокам"""

df['Many_service_calls'] = (df['Customer service calls'] > 3).astype('int')
pd.crosstab(df['Many_service_calls'], df['Churn'], margins=True)

sns.catplot(data=df, x='Many_service_calls', kind='count', hue='Churn')

"""**результат следующего кода расходится с результатом в задании, подскажите, пожалуйста, в чем ошибка"""

pd.crosstab(df['Many_service_calls'] & df['International plan'], df['Churn'])
